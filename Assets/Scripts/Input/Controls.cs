//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""17b50f40-81c8-470b-b93a-54dec7fa9b97"",
            ""actions"": [
                {
                    ""name"": ""Drop Annotation"",
                    ""type"": ""Button"",
                    ""id"": ""87f0ec98-942f-4d8f-80b5-dd247c2c0bcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b7afc0e0-b000-4540-acec-bd6b47e0b6e0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop Annotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c6b7176-eb38-4dba-a48a-6112d79ed3f4"",
                    ""path"": ""<Touchscreen>/touch0/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop Annotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Model_Interaction"",
            ""id"": ""d6ba9758-f644-4724-98c7-0aadf368ac98"",
            ""actions"": [
                {
                    ""name"": ""Rotate Object"",
                    ""type"": ""PassThrough"",
                    ""id"": ""268635ea-1122-45a0-955b-24738271434a"",
                    ""expectedControlType"": """",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9989751-e16e-4c95-b23b-62b87b9692c2"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone(min=0.1,max=50)"",
                    ""groups"": """",
                    ""action"": ""Rotate Object"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Mouse Drag"",
                    ""id"": ""19d70157-2d71-4830-a388-737f55cc93de"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Object"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""66de2710-2328-40a7-89a8-fee0170664c7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Object"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""65081366-579b-442e-802f-e57529bff7e7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Object"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_DropAnnotation = m_UI.FindAction("Drop Annotation", throwIfNotFound: true);
        // Model_Interaction
        m_Model_Interaction = asset.FindActionMap("Model_Interaction", throwIfNotFound: true);
        m_Model_Interaction_RotateObject = m_Model_Interaction.FindAction("Rotate Object", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_DropAnnotation;
    public struct UIActions
    {
        private @Controls m_Wrapper;
        public UIActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DropAnnotation => m_Wrapper.m_UI_DropAnnotation;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @DropAnnotation.started -= m_Wrapper.m_UIActionsCallbackInterface.OnDropAnnotation;
                @DropAnnotation.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnDropAnnotation;
                @DropAnnotation.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnDropAnnotation;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DropAnnotation.started += instance.OnDropAnnotation;
                @DropAnnotation.performed += instance.OnDropAnnotation;
                @DropAnnotation.canceled += instance.OnDropAnnotation;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // Model_Interaction
    private readonly InputActionMap m_Model_Interaction;
    private IModel_InteractionActions m_Model_InteractionActionsCallbackInterface;
    private readonly InputAction m_Model_Interaction_RotateObject;
    public struct Model_InteractionActions
    {
        private @Controls m_Wrapper;
        public Model_InteractionActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateObject => m_Wrapper.m_Model_Interaction_RotateObject;
        public InputActionMap Get() { return m_Wrapper.m_Model_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Model_InteractionActions set) { return set.Get(); }
        public void SetCallbacks(IModel_InteractionActions instance)
        {
            if (m_Wrapper.m_Model_InteractionActionsCallbackInterface != null)
            {
                @RotateObject.started -= m_Wrapper.m_Model_InteractionActionsCallbackInterface.OnRotateObject;
                @RotateObject.performed -= m_Wrapper.m_Model_InteractionActionsCallbackInterface.OnRotateObject;
                @RotateObject.canceled -= m_Wrapper.m_Model_InteractionActionsCallbackInterface.OnRotateObject;
            }
            m_Wrapper.m_Model_InteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotateObject.started += instance.OnRotateObject;
                @RotateObject.performed += instance.OnRotateObject;
                @RotateObject.canceled += instance.OnRotateObject;
            }
        }
    }
    public Model_InteractionActions @Model_Interaction => new Model_InteractionActions(this);
    public interface IUIActions
    {
        void OnDropAnnotation(InputAction.CallbackContext context);
    }
    public interface IModel_InteractionActions
    {
        void OnRotateObject(InputAction.CallbackContext context);
    }
}
