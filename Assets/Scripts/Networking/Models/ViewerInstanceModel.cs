using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class ViewerInstanceModel
{
    [RealtimeProperty(1, true, true)] private string _name;

    [RealtimeProperty(2, true, false)] private uint _viewerID;

    [RealtimeProperty(3, false, false)] private Vector3 _viewerLocation;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class ViewerInstanceModel : RealtimeModel {
    public UnityEngine.Vector3 viewerLocation {
        get {
            return _viewerLocationProperty.value;
        }
        set {
            if (_viewerLocationProperty.value == value) return;
            _viewerLocationProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public string name {
        get {
            return _nameProperty.value;
        }
        set {
            if (_nameProperty.value == value) return;
            _nameProperty.value = value;
            InvalidateReliableLength();
            FireNameDidChange(value);
        }
    }
    
    public uint viewerID {
        get {
            return _viewerIDProperty.value;
        }
        set {
            if (_viewerIDProperty.value == value) return;
            _viewerIDProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(ViewerInstanceModel model, T value);
    public event PropertyChangedHandler<string> nameDidChange;
    
    public enum PropertyID : uint {
        Name = 1,
        ViewerID = 2,
        ViewerLocation = 3,
    }
    
    #region Properties
    
    private ReliableProperty<string> _nameProperty;
    
    private ReliableProperty<uint> _viewerIDProperty;
    
    private UnreliableProperty<UnityEngine.Vector3> _viewerLocationProperty;
    
    #endregion
    
    public ViewerInstanceModel() : base(null) {
        _nameProperty = new ReliableProperty<string>(1, _name);
        _viewerIDProperty = new ReliableProperty<uint>(2, _viewerID);
        _viewerLocationProperty = new UnreliableProperty<UnityEngine.Vector3>(3, _viewerLocation);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _nameProperty.UnsubscribeCallback();
        _viewerIDProperty.UnsubscribeCallback();
    }
    
    private void FireNameDidChange(string value) {
        try {
            nameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _nameProperty.WriteLength(context);
        length += _viewerIDProperty.WriteLength(context);
        length += _viewerLocationProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _nameProperty.Write(stream, context);
        writes |= _viewerIDProperty.Write(stream, context);
        writes |= _viewerLocationProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Name: {
                    changed = _nameProperty.Read(stream, context);
                    if (changed) FireNameDidChange(name);
                    break;
                }
                case (uint) PropertyID.ViewerID: {
                    changed = _viewerIDProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.ViewerLocation: {
                    changed = _viewerLocationProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _name = name;
        _viewerID = viewerID;
        _viewerLocation = viewerLocation;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
